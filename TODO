# TODO For Disp

## Active Tasks

 - Finish current Text -> Tokens -> Spanned AST sequence.
   - Investigate chumsky error
   - Investigate infinite compile error
 - Refactor existing REPL Impl
 - Start working on creating and saving graph structures (ontologies).

## Goal Outline

### Basic Binary Format
 * Zero-copy deserialization parser rkyv for serialization/deserialization
 - AST Format
   - Programming this alongside Praser
 - Separate Semantic and Syntactic Format
 - Ontology-Based Format

### Finish Parser
 * Current Syntax Example:
   * ```rust
      /// Vector definition 1
      let Vec2 := { x: Num, y: Num };
      /// Vector definition 2
      let Vec2_v2 := Array{Num, 2};
      /// Derive an isomorphic relation
      let _ : Isomorphic{Vec2, Vec2_v2} := iso_derive[Vec2, Vec2_v2][{v -> v.x, v -> v[0]}, {v -> v.y, v -> v[1]}];
      /// Vector addition definition 1
      let add := { lhs: Vec2 } -> ({rhs} -> {
        x := lhs.x + rhs.x,
        y := lhs.y + rhs.y,
      }): Vec2 -> Vec2 -> Vec2;
      /// Vector addition definition 2
      let add_v2 := {lhs: Vec2, rhs: Vec2} -> Vec2 {
        x := lhs.x + rhs.x,
        y := lhs.y + rhs.y,
      };
      /// Prove functional equivalence (TODO)
      let _ : Isomorphic[add, add_v2]
     ```
### Implement Pretty-printer
 * Print out the semantic tree
 * Store removed syntactic information and add it back so that parsing is completely reversible
 * Different formats (This is out-of-scope for this project)

### Interpreter
 * Loading text (.disp) and binary (.dbf) files 
 * Use Ontological Format as a Module-system to parse user REPL commands and query for what specific implementation they are referring to.
   * Example:
     * 
