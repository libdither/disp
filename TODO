# TODO For Disp

## Week Goal
 - Extract Evaluatable Structure from Syntax Tree

## 2nd Week Goal
 - Evaluate Evaluatable Structure

## Month
 - Type system encodings

## Active Tasks

 - Parser (Text -> Tokens -> Spanned AST). - MVP DONE
   - Investigate chumsky error - PR Submitted
     - Other person has different error after PR merged
   - Figure out how to write parser unit tests. (Look at what rust-lang does)
 - Create some example files.
 - Rewrite Expression Evaluation
 - Implement Type Checking
 - Refactor existing REPL Impl
   - Ongoing
 - Work on creating and saving graph structures (ontologies).
   - Maybe look into interfacing with a Graph/Relational DB for this?

## Goals Outline

### Basic Binary Format
 * Zero-copy deserialization parser rkyv for serialization/deserialization
 - AST Format
   - Programming this alongside Praser
 - Separate Semantic and Syntactic Format
 - Ontology-Based Format (?)

### Finish Parser
 * Current Syntax Example:
   * ```rust
      /// Vector definition 1
      Vec2 := { x: Num, y: Num }
      /// Vector definition 2
      Vec2_v2 := Array{Num, 2}
      /// Derive an isomorphic relation
      Isomorphic{Vec2, Vec2_v2} := iso_derive[Vec2, Vec2_v2][{v -> v.x, v -> v[0]}, {v -> v.y, v -> v[1]}]
      /// Vector addition definition 1
      add := { lhs: Vec2 } -> ({rhs} -> {
        x := lhs.x + rhs.x,
        y := lhs.y + rhs.y,
      }): Vec2 -> (Vec2 -> Vec2)
      /// Vector addition definition 2
      add_v2 := { lhs: Vec2, rhs: Vec2 } -> Vec2 {
        x := lhs.x + rhs.x,
        y := lhs.y + rhs.y,
      }
      /// Prove functional equivalence (TODO)
      let _ : Isomorphic[add, add_v2]
     ```
### Implement Pretty-printer
 * Print out the semantic tree
 * Store removed syntactic information and add it back so that parsing is completely reversible
 * Different formats (This is out-of-scope for this project)

### Interpreter
 * Loading text (.disp) and binary (.dbf) files 
 * Use Ontological Format as a Module-system (i.e. stores definitions).
 * Parse user commands and interactively ask user for which specific implementation they want (if multiple are in scope).
 * 
